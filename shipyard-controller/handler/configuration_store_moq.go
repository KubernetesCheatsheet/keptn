// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handler

import (
	"github.com/keptn/go-utils/pkg/api/models"
	"sync"
)

// Ensure, that ConfigurationStoreMock does implement ConfigurationStore.
// If this is not the case, regenerate this file with moq.
var _ ConfigurationStore = &ConfigurationStoreMock{}

// ConfigurationStoreMock is a mock implementation of ConfigurationStore.
//
//     func TestSomethingThatUsesConfigurationStore(t *testing.T) {
//
//         // make and configure a mocked ConfigurationStore
//         mockedConfigurationStore := &ConfigurationStoreMock{
//             CreateProjectFunc: func(project models.Project) error {
// 	               panic("mock out the CreateProject method")
//             },
//             CreateProjectShipyardFunc: func(projectName string, resoureces []*models.Resource) error {
// 	               panic("mock out the CreateProjectShipyard method")
//             },
//             CreateStageFunc: func(projectName string, stage string) error {
// 	               panic("mock out the CreateStage method")
//             },
//             DeleteProjectFunc: func(projectName string) error {
// 	               panic("mock out the DeleteProject method")
//             },
//             GetProjectResourceFunc: func(projectName string, resourceURI string) (*models.Resource, error) {
// 	               panic("mock out the GetProjectResource method")
//             },
//             UpdateProjectFunc: func(project models.Project) error {
// 	               panic("mock out the UpdateProject method")
//             },
//         }
//
//         // use mockedConfigurationStore in code that requires ConfigurationStore
//         // and then make assertions.
//
//     }
type ConfigurationStoreMock struct {
	// CreateProjectFunc mocks the CreateProject method.
	CreateProjectFunc func(project models.Project) error

	// CreateProjectShipyardFunc mocks the CreateProjectShipyard method.
	CreateProjectShipyardFunc func(projectName string, resoureces []*models.Resource) error

	// CreateStageFunc mocks the CreateStage method.
	CreateStageFunc func(projectName string, stage string) error

	// DeleteProjectFunc mocks the DeleteProject method.
	DeleteProjectFunc func(projectName string) error

	// GetProjectResourceFunc mocks the GetProjectResource method.
	GetProjectResourceFunc func(projectName string, resourceURI string) (*models.Resource, error)

	// UpdateProjectFunc mocks the UpdateProject method.
	UpdateProjectFunc func(project models.Project) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateProject holds details about calls to the CreateProject method.
		CreateProject []struct {
			// Project is the project argument value.
			Project models.Project
		}
		// CreateProjectShipyard holds details about calls to the CreateProjectShipyard method.
		CreateProjectShipyard []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
			// Resoureces is the resoureces argument value.
			Resoureces []*models.Resource
		}
		// CreateStage holds details about calls to the CreateStage method.
		CreateStage []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
			// Stage is the stage argument value.
			Stage string
		}
		// DeleteProject holds details about calls to the DeleteProject method.
		DeleteProject []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
		}
		// GetProjectResource holds details about calls to the GetProjectResource method.
		GetProjectResource []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
			// ResourceURI is the resourceURI argument value.
			ResourceURI string
		}
		// UpdateProject holds details about calls to the UpdateProject method.
		UpdateProject []struct {
			// Project is the project argument value.
			Project models.Project
		}
	}
	lockCreateProject         sync.RWMutex
	lockCreateProjectShipyard sync.RWMutex
	lockCreateStage           sync.RWMutex
	lockDeleteProject         sync.RWMutex
	lockGetProjectResource    sync.RWMutex
	lockUpdateProject         sync.RWMutex
}

// CreateProject calls CreateProjectFunc.
func (mock *ConfigurationStoreMock) CreateProject(project models.Project) error {
	if mock.CreateProjectFunc == nil {
		panic("ConfigurationStoreMock.CreateProjectFunc: method is nil but ConfigurationStore.CreateProject was just called")
	}
	callInfo := struct {
		Project models.Project
	}{
		Project: project,
	}
	mock.lockCreateProject.Lock()
	mock.calls.CreateProject = append(mock.calls.CreateProject, callInfo)
	mock.lockCreateProject.Unlock()
	return mock.CreateProjectFunc(project)
}

// CreateProjectCalls gets all the calls that were made to CreateProject.
// Check the length with:
//     len(mockedConfigurationStore.CreateProjectCalls())
func (mock *ConfigurationStoreMock) CreateProjectCalls() []struct {
	Project models.Project
} {
	var calls []struct {
		Project models.Project
	}
	mock.lockCreateProject.RLock()
	calls = mock.calls.CreateProject
	mock.lockCreateProject.RUnlock()
	return calls
}

// CreateProjectShipyard calls CreateProjectShipyardFunc.
func (mock *ConfigurationStoreMock) CreateProjectShipyard(projectName string, resoureces []*models.Resource) error {
	if mock.CreateProjectShipyardFunc == nil {
		panic("ConfigurationStoreMock.CreateProjectShipyardFunc: method is nil but ConfigurationStore.CreateProjectShipyard was just called")
	}
	callInfo := struct {
		ProjectName string
		Resoureces  []*models.Resource
	}{
		ProjectName: projectName,
		Resoureces:  resoureces,
	}
	mock.lockCreateProjectShipyard.Lock()
	mock.calls.CreateProjectShipyard = append(mock.calls.CreateProjectShipyard, callInfo)
	mock.lockCreateProjectShipyard.Unlock()
	return mock.CreateProjectShipyardFunc(projectName, resoureces)
}

// CreateProjectShipyardCalls gets all the calls that were made to CreateProjectShipyard.
// Check the length with:
//     len(mockedConfigurationStore.CreateProjectShipyardCalls())
func (mock *ConfigurationStoreMock) CreateProjectShipyardCalls() []struct {
	ProjectName string
	Resoureces  []*models.Resource
} {
	var calls []struct {
		ProjectName string
		Resoureces  []*models.Resource
	}
	mock.lockCreateProjectShipyard.RLock()
	calls = mock.calls.CreateProjectShipyard
	mock.lockCreateProjectShipyard.RUnlock()
	return calls
}

// CreateStage calls CreateStageFunc.
func (mock *ConfigurationStoreMock) CreateStage(projectName string, stage string) error {
	if mock.CreateStageFunc == nil {
		panic("ConfigurationStoreMock.CreateStageFunc: method is nil but ConfigurationStore.CreateStage was just called")
	}
	callInfo := struct {
		ProjectName string
		Stage       string
	}{
		ProjectName: projectName,
		Stage:       stage,
	}
	mock.lockCreateStage.Lock()
	mock.calls.CreateStage = append(mock.calls.CreateStage, callInfo)
	mock.lockCreateStage.Unlock()
	return mock.CreateStageFunc(projectName, stage)
}

// CreateStageCalls gets all the calls that were made to CreateStage.
// Check the length with:
//     len(mockedConfigurationStore.CreateStageCalls())
func (mock *ConfigurationStoreMock) CreateStageCalls() []struct {
	ProjectName string
	Stage       string
} {
	var calls []struct {
		ProjectName string
		Stage       string
	}
	mock.lockCreateStage.RLock()
	calls = mock.calls.CreateStage
	mock.lockCreateStage.RUnlock()
	return calls
}

// DeleteProject calls DeleteProjectFunc.
func (mock *ConfigurationStoreMock) DeleteProject(projectName string) error {
	if mock.DeleteProjectFunc == nil {
		panic("ConfigurationStoreMock.DeleteProjectFunc: method is nil but ConfigurationStore.DeleteProject was just called")
	}
	callInfo := struct {
		ProjectName string
	}{
		ProjectName: projectName,
	}
	mock.lockDeleteProject.Lock()
	mock.calls.DeleteProject = append(mock.calls.DeleteProject, callInfo)
	mock.lockDeleteProject.Unlock()
	return mock.DeleteProjectFunc(projectName)
}

// DeleteProjectCalls gets all the calls that were made to DeleteProject.
// Check the length with:
//     len(mockedConfigurationStore.DeleteProjectCalls())
func (mock *ConfigurationStoreMock) DeleteProjectCalls() []struct {
	ProjectName string
} {
	var calls []struct {
		ProjectName string
	}
	mock.lockDeleteProject.RLock()
	calls = mock.calls.DeleteProject
	mock.lockDeleteProject.RUnlock()
	return calls
}

// GetProjectResource calls GetProjectResourceFunc.
func (mock *ConfigurationStoreMock) GetProjectResource(projectName string, resourceURI string) (*models.Resource, error) {
	if mock.GetProjectResourceFunc == nil {
		panic("ConfigurationStoreMock.GetProjectResourceFunc: method is nil but ConfigurationStore.GetProjectResource was just called")
	}
	callInfo := struct {
		ProjectName string
		ResourceURI string
	}{
		ProjectName: projectName,
		ResourceURI: resourceURI,
	}
	mock.lockGetProjectResource.Lock()
	mock.calls.GetProjectResource = append(mock.calls.GetProjectResource, callInfo)
	mock.lockGetProjectResource.Unlock()
	return mock.GetProjectResourceFunc(projectName, resourceURI)
}

// GetProjectResourceCalls gets all the calls that were made to GetProjectResource.
// Check the length with:
//     len(mockedConfigurationStore.GetProjectResourceCalls())
func (mock *ConfigurationStoreMock) GetProjectResourceCalls() []struct {
	ProjectName string
	ResourceURI string
} {
	var calls []struct {
		ProjectName string
		ResourceURI string
	}
	mock.lockGetProjectResource.RLock()
	calls = mock.calls.GetProjectResource
	mock.lockGetProjectResource.RUnlock()
	return calls
}

// UpdateProject calls UpdateProjectFunc.
func (mock *ConfigurationStoreMock) UpdateProject(project models.Project) error {
	if mock.UpdateProjectFunc == nil {
		panic("ConfigurationStoreMock.UpdateProjectFunc: method is nil but ConfigurationStore.UpdateProject was just called")
	}
	callInfo := struct {
		Project models.Project
	}{
		Project: project,
	}
	mock.lockUpdateProject.Lock()
	mock.calls.UpdateProject = append(mock.calls.UpdateProject, callInfo)
	mock.lockUpdateProject.Unlock()
	return mock.UpdateProjectFunc(project)
}

// UpdateProjectCalls gets all the calls that were made to UpdateProject.
// Check the length with:
//     len(mockedConfigurationStore.UpdateProjectCalls())
func (mock *ConfigurationStoreMock) UpdateProjectCalls() []struct {
	Project models.Project
} {
	var calls []struct {
		Project models.Project
	}
	mock.lockUpdateProject.RLock()
	calls = mock.calls.UpdateProject
	mock.lockUpdateProject.RUnlock()
	return calls
}
